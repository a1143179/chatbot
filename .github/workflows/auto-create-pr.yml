name: Auto Create Pull Request

on:
  push:
    branches-ignore:
      - main

jobs:
  auto-create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_PAT }}

      - name: Check if PR exists
        id: check-pr
        env:
          GH_TOKEN: ${{ secrets.ACTION_PAT }}
        run: |
          # Get the current branch name
          BRANCH_NAME="${{ github.ref_name }}"
          
          # Check if a PR already exists for this branch with retry mechanism
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempting to check PR existence (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            
            # Add timeout to gh command and capture exit code
            if PR_EXISTS=$(timeout 30s gh pr list --head "$BRANCH_NAME" --json number --jq 'length' 2>/dev/null); then
              if [ ! -z "$PR_EXISTS" ] && [ "$PR_EXISTS" != "null" ]; then
                echo "Successfully checked PR existence: $PR_EXISTS"
                break
              else
                echo "Empty or null response, treating as failure"
                RETRY_COUNT=$((RETRY_COUNT + 1))
              fi
            else
              echo "GitHub CLI command failed or timed out"
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              # Exponential backoff: 15s, 30s, 45s, 60s
              WAIT_TIME=$((15 * RETRY_COUNT))
              echo "Failed to check PR existence, retrying in $WAIT_TIME seconds..."
              sleep $WAIT_TIME
            else
              echo "Failed to check PR existence after $MAX_RETRIES attempts"
              echo "Setting default value and continuing..."
              PR_EXISTS=0
            fi
          done
          
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          if [ "$PR_EXISTS" -eq 0 ]; then
            echo "No PR exists for branch $BRANCH_NAME"
          else
            echo "PR already exists for branch $BRANCH_NAME"
          fi

      - name: Get commit messages
        id: commits
        if: steps.check-pr.outputs.pr_exists == '0'
        run: |
          # Get the last 5 commit messages for PR description
          COMMIT_MESSAGES=$(git log --oneline -5 --no-merges)
          echo "commit_messages<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.check-pr.outputs.pr_exists == '0'
        env:
          GH_TOKEN: ${{ secrets.ACTION_PAT }}
        run: |
          BRANCH_NAME="${{ steps.check-pr.outputs.branch_name }}"
          
          # All branches create PR to main
          TARGET_BRANCH="main"
          
          # Determine PR title and body based on branch name
          if [[ "$BRANCH_NAME" == "working" ]]; then
            PR_TITLE="🚀 Deploy to Production"
            PR_BODY="## 🚀 Production Deployment
          
          This PR contains changes ready for production deployment.
          
          ### 📋 What's Changed
          - Automated deployment from working branch
          - All tests passing ✅
          - Ready for review and merge
          
          ### 🔄 Recent Commits
          \`\`\`
          ${{ steps.commits.outputs.commit_messages }}
          \`\`\`
          
          ### ✅ Checklist
          - [ ] Tests passing
          - [ ] Code reviewed
          - [ ] Ready for deployment
          - [ ] No breaking changes"
          
          elif [[ "$BRANCH_NAME" =~ ^feature/ ]]; then
            FEATURE_NAME=$(echo "$BRANCH_NAME" | sed 's/feature\///')
            PR_TITLE="✨ Feature: $FEATURE_NAME"
            PR_BODY="## ✨ Feature: $FEATURE_NAME
          
          This PR adds the $FEATURE_NAME feature.
          
          ### 📋 What's Changed
          - New feature implementation
          - Ready for review and testing
          
          ### 🔄 Recent Commits
          \`\`\`
          ${{ steps.commits.outputs.commit_messages }}
          \`\`\`
          
          ### ✅ Checklist
          - [ ] Tests passing
          - [ ] Code reviewed
          - [ ] Feature tested
          - [ ] Documentation updated"
          
          elif [[ "$BRANCH_NAME" =~ ^hotfix/ ]]; then
            HOTFIX_NAME=$(echo "$BRANCH_NAME" | sed 's/hotfix\///')
            PR_TITLE="🚨 Hotfix: $HOTFIX_NAME"
            PR_BODY="## 🚨 Hotfix: $HOTFIX_NAME
          
          This PR contains a critical hotfix.
          
          ### 📋 What's Changed
          - Critical bug fix
          - Urgent deployment needed
          
          ### 🔄 Recent Commits
          \`\`\`
          ${{ steps.commits.outputs.commit_messages }}
          \`\`\`
          
          ### ✅ Checklist
          - [ ] Tests passing
          - [ ] Code reviewed
          - [ ] Critical fix verified
          - [ ] Ready for immediate deployment"
          
          elif [[ "$BRANCH_NAME" =~ ^bugfix/ ]]; then
            BUGFIX_NAME=$(echo "$BRANCH_NAME" | sed 's/bugfix\///')
            PR_TITLE="🐛 Bugfix: $BUGFIX_NAME"
            PR_BODY="## 🐛 Bugfix: $BUGFIX_NAME
          
          This PR fixes a bug in the codebase.
          
          ### 📋 What's Changed
          - Bug fix implementation
          - Ready for review and testing
          
          ### 🔄 Recent Commits
          \`\`\`
          ${{ steps.commits.outputs.commit_messages }}
          \`\`\`
          
          ### ✅ Checklist
          - [ ] Tests passing
          - [ ] Code reviewed
          - [ ] Bug fix verified
          - [ ] No regression introduced"
          
          else
            PR_TITLE="📝 Update from $BRANCH_NAME"
            PR_BODY="## 📝 Update from $BRANCH_NAME
          
          This PR contains changes from the $BRANCH_NAME branch.
          
          ### 📋 What's Changed
          - Updates from $BRANCH_NAME branch
          - Ready for review
          
          ### 🔄 Recent Commits
          \`\`\`
          ${{ steps.commits.outputs.commit_messages }}
          \`\`\`
          
          ### ✅ Checklist
          - [ ] Tests passing
          - [ ] Code reviewed
          - [ ] Ready for merge"
          fi
          
          # Create the pull request with retry mechanism
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempting to create PR (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            
            if timeout 60s gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base "$TARGET_BRANCH" \
              --head "$BRANCH_NAME"; then
              echo "Successfully created PR from $BRANCH_NAME to $TARGET_BRANCH"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                # Exponential backoff: 15s, 30s, 45s, 60s
                WAIT_TIME=$((15 * RETRY_COUNT))
                echo "Failed to create PR, retrying in $WAIT_TIME seconds..."
                sleep $WAIT_TIME
              else
                echo "Failed to create PR after $MAX_RETRIES attempts"
                echo "Continuing without creating PR..."
              fi
            fi
          done

      - name: Update existing PR
        if: steps.check-pr.outputs.pr_exists != '0'
        env:
          GH_TOKEN: ${{ secrets.ACTION_PAT }}
        run: |
          BRANCH_NAME="${{ steps.check-pr.outputs.branch_name }}"
          
          # Get the PR number with retry mechanism
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempting to get PR number (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            
            if PR_NUMBER=$(timeout 30s gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number' 2>/dev/null); then
              if [ ! -z "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
                echo "Successfully got PR number: $PR_NUMBER"
                break
              else
                echo "Empty or null PR number, treating as failure"
                RETRY_COUNT=$((RETRY_COUNT + 1))
              fi
            else
              echo "GitHub CLI command failed or timed out"
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              # Exponential backoff: 15s, 30s, 45s, 60s
              WAIT_TIME=$((15 * RETRY_COUNT))
              echo "Failed to get PR number, retrying in $WAIT_TIME seconds..."
              sleep $WAIT_TIME
            else
              echo "Failed to get PR number after $MAX_RETRIES attempts"
              echo "Skipping PR update..."
              exit 0
            fi
          done
          
          # Get recent commits for update
          COMMIT_MESSAGES=$(git log --oneline -3 --no-merges)
          
          # Update the PR with latest changes and retry mechanism
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempting to update PR (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            
            if timeout 60s gh pr edit $PR_NUMBER --body "Updated with latest changes from $BRANCH_NAME
          
          ### 🔄 Recent Updates
          \`\`\`
          $COMMIT_MESSAGES
          \`\`\`"; then
              echo "Successfully updated existing PR #$PR_NUMBER for branch $BRANCH_NAME"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                # Exponential backoff: 15s, 30s, 45s, 60s
                WAIT_TIME=$((15 * RETRY_COUNT))
                echo "Failed to update PR, retrying in $WAIT_TIME seconds..."
                sleep $WAIT_TIME
              else
                echo "Failed to update PR after $MAX_RETRIES attempts"
                echo "Continuing without updating PR..."
              fi
            fi
          done 